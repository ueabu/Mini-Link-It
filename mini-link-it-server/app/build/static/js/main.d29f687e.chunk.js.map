{"version":3,"sources":["components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","event","a","preventDefault","setState","loading","generatedURL","validateInput","generatedKey","nanoid","state","preferedAlias","db","getDatabase","set","ref","longURL","then","result","catch","e","hasError","key","errors","indexOf","handleChange","target","id","value","prevState","errorMessages","errorMessage","length","push","isWebUri","checkKeyExists","exists","dbRef","get","child","error","copyToClipBoard","navigator","clipboard","writeText","toolTipMessage","className","autoComplete","onChange","this","type","required","placeholder","htmlFor","suggestedAlias","onClick","role","disabled","OverlayTrigger","placement","overlay","Tooltip","title","React","Component","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d29f687e.chunk.js","sourcesContent":["import React from \"react\";\nimport { nanoid } from 'nanoid'\nimport { getDatabase, child, ref, set, get } from \"firebase/database\";\nimport { isWebUri } from 'valid-url';\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\n\n\nclass Form extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            longURL: '',\n            preferedAlias: '',\n            generatedURL: '',\n            loading: false,\n            errors: [],\n            errorMessage: {},\n            toolTipMessage: 'Copy To Clip Board'\n        };\n\n    }\n\n    //When the user clicks submit, this will be called\n    onSubmit = async (event) => {\n        event.preventDefault(); //Prevents the page from reloading when submit is clicked\n        this.setState({\n            loading: true,\n            generatedURL: ''\n        })\n\n        // Validate the input the user has sumbitted\n        var isFormValid = await this.validateInput()\n        if (!isFormValid) {\n            return\n        }\n\n        //If the user has input a prefered alias then we use it, if not, we generate one\n        var generatedKey = nanoid(5);\n        var generatedURL = \"minilinkit.com/\" + generatedKey\n\n        if (this.state.preferedAlias !== '') {\n            generatedKey = this.state.preferedAlias\n            generatedURL = \"minilinkit.com/\" + this.state.preferedAlias\n        }\n\n        const db = getDatabase();\n        set(ref(db, '/' + generatedKey), {\n\n            generatedKey: generatedKey,\n            longURL: this.state.longURL,\n            preferedAlias: this.state.preferedAlias,\n            generatedURL: generatedURL\n\n        }).then((result) => {\n            this.setState({\n                generatedURL: generatedURL,\n                loading: false\n            })\n        }).catch((e) => {\n\n        })\n    };\n\n    hasError = (key) => {\n        return this.state.errors.indexOf(key) !== -1;\n    }\n\n\n    //Save the content of the form as the user is typing!\n    handleChange = (e) => {\n        const { id, value } = e.target\n        this.setState(prevState => ({\n            ...prevState,\n            [id]: value\n        }))\n    }\n\n\n\n    validateInput = async () => {\n        var errors = [];\n        var errorMessages = this.state.errorMessage\n        if (this.state.longURL.length === 0) {\n            errors.push(\"longURL\");\n            errorMessages['longURL'] = 'Please enter your URL!';\n        } else if (!isWebUri(this.state.longURL)) {\n            errors.push(\"longURL\");\n            errorMessages['longURL'] = 'Please a URL in the form of https://www....';\n        }\n\n        if (this.state.preferedAlias !== '') {\n            if (this.state.preferedAlias.length > 7) {\n                errors.push(\"suggestedAlias\");\n                errorMessages['suggestedAlias'] = 'Please Enter an Alias less than 7 Characters';\n            } else if (this.state.preferedAlias.indexOf(' ') >= 0) {\n                errors.push(\"suggestedAlias\");\n                errorMessages['suggestedAlias'] = 'Spaces are not allowed in URLS';\n            }\n\n            var keyExists = await this.checkKeyExists()\n\n            if (keyExists.exists()) {\n                errors.push(\"suggestedAlias\");\n                errorMessages['suggestedAlias'] = 'The Alias you have entered already exists! Please enter another one =-)';\n            }\n        }\n\n        this.setState({\n            errors: errors,\n            errorMessages: errorMessages,\n            loading: false\n        });\n\n        if (errors.length > 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    checkKeyExists = async () => {\n        const dbRef = ref(getDatabase());\n        return get(child(dbRef, `/${this.state.preferedAlias}`)).catch((error) => {\n            return false\n        });\n    }\n\n    copyToClipBoard = () => {\n        navigator.clipboard.writeText(this.state.generatedURL)\n        this.setState({\n            toolTipMessage: 'Copied!'\n        })\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"container\">\n                <form autoComplete=\"off\">\n                    <h3>Mini Link It!</h3>\n\n                    <div className=\"form-group\">\n                        <label>Enter Your Long URL</label>\n                        <input\n                            id=\"longURL\"\n                            onChange={this.handleChange}\n                            value={this.state.longURL}\n                            type=\"url\"\n                            required\n                            className={\n                                this.hasError(\"longURL\")\n                                    ? \"form-control is-invalid\"\n                                    : \"form-control\"\n                            }\n                            placeholder=\"https://www...\"\n                        />\n                    </div>\n                    <div\n                        className={\n                            this.hasError(\"longURL\") ? \"text-danger\" : \"visually-hidden\"\n                        }\n                    >\n                        {this.state.errorMessage.longURL}\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"basic-url\">Your Mini URL</label>\n                        <div className=\"input-group mb-3\">\n                            <div className=\"input-group-prepend\">\n                                <span className=\"input-group-text\">minilinkit.com/</span>\n                            </div>\n                            <input\n                                id=\"preferedAlias\"\n                                onChange={this.handleChange}\n                                value={this.state.preferedAlias}\n                                className={\n                                    this.hasError(\"preferedAlias\")\n                                        ? \"form-control is-invalid\"\n                                        : \"form-control\"\n                                }\n                                type=\"text\" placeholder=\"eg. 3fwias (Optional)\"\n                            />\n                        </div>\n                        <div\n                            className={\n                                this.hasError(\"suggestedAlias\") ? \"text-danger\" : \"visually-hidden\"\n                            }\n                        >\n                            {this.state.errorMessage.suggestedAlias}\n                        </div>\n                    </div>\n\n\n                    <button className=\"btn btn-primary\" type=\"button\" onClick={this.onSubmit}>\n                        {\n                            this.state.loading ?\n                                <div>\n                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n                                </div> :\n                                <div>\n                                    <span className=\"visually-hidden spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n                                    <span>Mini Link It</span>\n                                </div>\n                        }\n\n                    </button>\n\n                    {\n                        this.state.generatedURL === '' ?\n                            <div></div>\n                            :\n                            <div className=\"generatedurl\">\n                                <span>Your generated URL is: </span>\n                                <div className=\"input-group mb-3\">\n                                    <input disabled type=\"text\" value={this.state.generatedURL} className=\"form-control\" placeholder=\"Recipient's username\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\" />\n                                    <div className=\"input-group-append\">\n                                        <OverlayTrigger\n                                            key={'top'}\n                                            placement={'top'}\n                                            overlay={\n                                                <Tooltip id={`tooltip-${'top'}`}>\n                                                    {this.state.toolTipMessage}\n                                                </Tooltip>\n                                            }\n                                        >\n                                            <button onClick={() => this.copyToClipBoard()} data-toggle=\"tooltip\" data-placement=\"top\" title=\"Tooltip on top\" className=\"btn btn-outline-secondary\" type=\"button\">Copy</button>\n\n                                        </OverlayTrigger>\n\n                                    </div>\n                                </div>\n                            </div>\n                    }\n\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Form;","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Form from \"./components/Form\";\n\nfunction App() {\n  return (<Router>\n    <div className=\"App\">\n      <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n          <Switch>\n            <Route exact path='/' component={Form} />\n            <Route path=\"/app\" component={Form} />\n          </Switch>\n        </div>\n      </div>\n    </div></Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { initializeApp } from \"firebase/app\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAbo5jKpHHQK9l6q9GnqprbXufvoUjJflM\",\n  authDomain: \"mini-link-it.firebaseapp.com\",\n  projectId: \"mini-link-it\",\n  storageBucket: \"mini-link-it.appspot.com\",\n  messagingSenderId: \"49632902433\",\n  appId: \"1:49632902433:web:23d16c6db052a8551d9260\",\n  measurementId: \"G-MN3XV0B1JJ\"\n};\n\ninitializeApp(firebaseConfig);\nReactDOM.render(\n  <BrowserRouter>\n      <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}